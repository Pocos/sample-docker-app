
daemon off;
error_log /dev/stdout warn;

worker_processes  auto;

pid /var/run/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout;

    gzip on;
    gzip_disable "msie6";

    gzip_comp_level 6;
    gzip_min_length 1100;
    gzip_buffers 16 8k;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml
        application/rss+xml
        image/svg+xml;

    # Turn off the bloody buffering to temp files
    proxy_buffering off;

    sendfile          off;
    keepalive_timeout 120;

    server_names_hash_bucket_size 128;

    # These two should be the same or nginx will start writing
    #  large request bodies to temp files
    client_body_buffer_size 10m;
    client_max_body_size    10m;

    server {
        listen 8080;
        server_name _;
        root /var/www/;
        index index.html;

        # Expire rules for static content

        # make sure service worker is not cached
        location ~* (service-worker\.js)$ {
          add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
          expires off;
          proxy_no_cache 1;
        }

        # make sure config file is not cached
        location ~* (config\.js)$ {
          add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
          expires off;
          proxy_no_cache 1;
        }

        # cache.appcache, your document html and data
        location ~* \.(?:manifest|appcache|html?|xml|json)$ {
          expires -1;
          # access_log logs/static.log; # I don't usually include a static log
        }

        # Feed
        location ~* \.(?:rss|atom)$ {
          expires 1h;
          add_header Cache-Control "public";
        }

        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
          expires 1h;
          access_log off;
          add_header Cache-Control "public";
        }

        # CSS, Javascript, fonts
        location ~* \.(?:css|js|woff2)$ {
          expires 1y;
          access_log off;
          add_header Cache-Control "public";
        }

        # Force all paths to load either itself (js files) or go through index.html.
        location / {
          try_files $uri /index.html;
        }

        location /health {
          add_header Content-Type text/plain;
          return 200 "healthy\n";
        }

        location /ready {
          add_header Content-Type text/plain;
          return 200 "ready\n";
        }
    }
}
